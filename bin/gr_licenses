#!/bin/bash
#
# Scans every production repo for its libraries and what licenses they provide.
# By default, provides a report (.csv) for each repo. Can take a while, since
# it does the analysis in a docker container, where it needs to bundle (and
# yarn client, and pip -r...) the repo first.
#
# Some repos are more difficult than others.  See the confluence page to
# get details of all the special cases.
#
# The report is based on ../policy/dependency_decisions.yml; if you need to
# work with that, the best thing to do at the moment is to use `dlf
# "license_finder -p && bash"` to get into a Docker container with the product
# in question, then use license_finder's commands to add licenses, whitelist
# them, or approve individual libraries.
#
# There is a companion Confluence page https://grandrounds.atlassian.net/wiki/x/F4C9DQ
#
# Dollar's Java code is too difficult to do at all right now. LicenseFinder
# doesn't do `ivy`, *and* `ivy` doesn't report many licenses -- sometimes
# because the packages used are so old, and sometimes because `ivy` doesn't
# seem to be getting everything maven has.
#
# Does *NOT* synchronize master in the repos in question; it just uses whatever
# clone you have.
#
scandir=${GR_HOME}/LicenseFinder/scans/$(date +'%Y%m%d')
mkdir -p ${scandir}

function rails_apps() {
  local rails=$(ls ${GR_HOME}/*/{bin,script}/rails | sed -e '/\*/d' -e 's;/\(bin\|script\)/.*$;;g')
  apps=''
  for app in $rails ; do
    if [ -f ${app}/*.gemspec ] ; then
      continue
    fi
    apps="${app} ${apps}"
  done
  echo $apps
}

function other_apps() {
  others="bain daas dollar jubilee reflex"
  apps=''
  for app in $others ; do
    apps="${GR_HOME}/${app} ${apps}"
  done
  echo $apps
}

default_list=true
format="csv"
default_projects="$(rails_apps) $(other_apps)"
report_file_extension="csv"

function usage() {
    cat << EOF
Usage: ${0} [options] <project name> <project name> <project name>

Options:

-h, -?, --help        Output usage information
--s3                  Copy scan results to s3 grnds-<env>-licenses. Current aws environment will be used.

Use one of the following flags to specify report format:

--compliance-report   Use csv format for report (default).
--html                Use html format for report.
--license-page        Use license page format for report (with commercial licenses filtered out).

Project directories to scan defaults to:
$(echo $default_projects | tr ' ' '\012')
EOF
    exit 1
}

function s3_init() {
  aws_environment=${1:-${AWS_ENVIRONMENT}}

  if [[ -z $aws_environment ]]; then
      echo No environment. Use aws-environment.
      exit 1
  fi
}

while [ $# -gt 0 ] ; do
  case $1 in
  -h | -? | --help)
    usage
    ;;
  --s3)
    s3_init
    ;;
  --compliance-report)
    format="csv"
    report_file_extension="csv"
    ;;
  --html)
    format="html"
    report_file_extension="html"
    ;;
  --license-page)
    format="license-page"
    report_file_extension="html"
    ;;
  -*)
    usage
    ;;
  *)
    projects="${projects} ${GR_HOME}/$1"
    ;;
  esac
  shift
done

license_finder_report="--format=$format --decisions_file=/policy/dependency_decisions.yml --columns=name version licenses approved license_links summary homepage"

if [ -z "${projects}" ] ; then
  projects=${default_projects}
fi

function make_csv_or_html() {
  # Remove everything before and after result tags,
  # Remove result tags and debug info,
  # Sort if format is csv
  sed -n -e '/<result>/,/<\/result>/p' "$1.txt" |\
    sed -e '/^<result>/d' -e '/^<\/result>/d' -e '/^LicenseFinder::/d' |\
    (test $format == "csv" && sort || cat) > "$1.$report_file_extension"
}

function s3_name() {
  local filename=$(basename ${1?'Missing filename argument to s3_name'})
  echo $filename | openssl md5 | cut -d' ' -f2
}

function s3_upload() {
  if [ -n "${aws_environment}" ] ; then
    local path="$1.$report_file_extension"
    local filename="$2.$report_file_extension"
    local s3_name="$(s3_name $filename).$report_file_extension"
    aws s3 cp "${path}" "s3://grnds-${aws_environment}-licenses/${s3_name}" --acl public-read && \
      echo "Scan result for '$2' uploaded to https://grnds-${aws_environment}-licenses.s3.amazonaws.com/${s3_name}"
  fi
}

# Jubilee is really more than one project, but this captures the stuff that I
# think we're using in topk;  there are lots of aborted little projects in
# there that prevent --recursive from working.  Also: it doesn't go after all
# the stuff in Hadoop or Spark; they have their own conclusive/inclusive
# license files (of dozens of contributions), so I decided to review and
# approve those separately.
function jubilee_license_finder() {
  echo "license_finder report -p ${license_finder_report}"
}

# Reflex fails to find some dependencies in --recursive mode.
function reflex_license_finder() {
  echo "license_finder report -p ${license_finder_report}"
}

function banyan_prepare() {
  echo "bundle install && yarn && cd client && npm install && cd .."
}

function bain_prepare() {
  echo "rm -f Gemfile* && pip install -r requirements.txt"
}

function bain_license_finder() {
  echo "license_finder report ${license_finder_report}"
}

# Simply couldn't get npm all the way right in banyan, so can't run
# --recursive. List seems comprehensive after doing this.
function banyan_license_finder() {
  echo "license_finder report ${license_finder_report} &&
    cd client &&
    license_finder report ${license_finder_report}
    "
}

# Don't use `--recursive` for "black".
# See https://www.pivotaltracker.com/n/projects/1554097/stories/154689192
function black_license_finder() {
   echo "license_finder report -p ${license_finder_report}"
}

function default_prepare() {
  echo "true"
}

function default_license_finder() {
   echo "license_finder report -p --recursive ${license_finder_report}"
}

function dispatch() {
  project=$1
  method=$2
  shift
  shift

  if type -t ${project}_${method} >/dev/null ; then
    ${project}_${method} $@
  else
    default_${method} $@
  fi
}

main() {
  for project_directory in $projects ; do
    cd ${project_directory}
    local project=$(basename $PWD)

    local prepare="$(dispatch ${project} prepare)"
    local license_finder="$(dispatch ${project} license_finder)"

    dlf "
      ${prepare} &&
      echo '<result>' &&
      ${license_finder} &&
      echo '</result>'
      " | tee ${scandir}/${project}.txt

    local basename="${scandir}/${project}"
    make_csv_or_html ${basename}
    s3_upload ${basename} ${project}
  done
}

where_was_i="${PWD}"
main
cd "${where_was_i}"
